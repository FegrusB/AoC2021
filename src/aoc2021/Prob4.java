package aoc2021;

import java.util.*;

//Solve for day four, part one of AoC2021
//Plays games of bingo. play1 prints the score of the first to win, play2 prints the last.

public class Prob4 {

	public static void main(String[] args) {
		
		//sets up input scanner, and needed objects/vars 
		Scanner myScanner;
		myScanner = GetScanner.get("2021-4.txt");
		Square[][] squares = new Square[5][5];
		ArrayList<Board> boards = new ArrayList<>();
		
		//First line of scanner = ints split with "," this is read in as randInputS
		String[] randInputS = myScanner.nextLine().split(",");
		
		//next, boards is populated with Boards,
		int c = 0;
		while(myScanner.hasNextLine()) {
			String nl = myScanner.nextLine();
			if (!(Objects.equals(nl, ""))) {
				
				//Input is cleaned into " " separated ints, 
				if( nl.charAt(0) == ' ') {nl = nl.substring(1);}
				nl = nl.replace("  ", " ");
				Square[] row = new Square[5];
				String[] split = nl.split(" ");
				
				//these are formed into row, an array of Squares. When row is finished add to squares a 2d array of Squares.
				for(int i = 0;i<split.length;i++) {if (!(Objects.equals(split[i], ""))) {row[i] = new Square(Integer.parseInt(split[i]));}}
				squares[c] = row;
				c++;
			}else if(c != 0) {
			
				// Use squares to construct a Board, add Board to boards, then clear squares.
				boards.add(new Board(squares));
				Arrays.fill(squares, null);
				c = 0;
			}
		}
		//last board is added, scanner closed
		boards.add(new Board(squares));
		myScanner.close();
		
		//Play for prob 1 and 2 outputs. Pass guesses string and boards
		play1(randInputS,boards);
		play2(randInputS,boards);

	}
	
	//Play to find answer for problem 1. This is the score generated by the first board to win.
	private static void play1(String[] randInputS,ArrayList<Board> boardsIn) {

		//Create new instance of board, copied from boardsIn. Initialise needed vars
		ArrayList<Board> boards = new ArrayList<>();
		for (Board b:boardsIn) {Board nB = new Board(b);boards.add(nB);}
		int score = 0;
		int count = 0;
		int checkNum;
		
		//until score is set, play game
		while(score == 0) {
			checkNum = Integer.parseInt(randInputS[count]);
			int countB = 0;
			
			//Iterate through boards, passing checkNum to each. check() will return 0 if number not present on board, and an int score if it is.
			while (score == 0 && countB<boards.size()) {
				score = boards.get(countB).check(checkNum);
				countB ++;
			}
			count++;
		}
		
		//Print score, answer for problem 1
		System.out.println(score);
	}
	
	//Play to find answer for problem 1. This is the score generated by the last board to win with the given guesses. 
	private static void play2(String[] randInputS,ArrayList<Board> boardsIn) {

		//Create new instance of board, copied from boardsIn. Initialise needed vars
		ArrayList<Board> boards = new ArrayList<>();
		for (Board b:boardsIn) {Board nB = new Board(b);boards.add(nB);}
		int score;
		int count = 0;
		int checkNum;
		int won = 0;
		int saveScore = 0;
		
		//Until every board has one, play game
		while(won<boards.size()) {
			
			//break if every number already tied. 
			if (count>(randInputS.length-1)) {break;}
			checkNum = Integer.parseInt(randInputS[count]);
			
			//Iterate through boards. If board has not already won, get score.
			for (Board board : boards) {
				if (!(board.getFinished())) {
					score = board.check(checkNum);

					//is score is not 0, board has won, increment won, and store score, so not overwritten
					if (!(score == 0)) {
						won++;
						saveScore = score;
					}
				}
			}
			count++;
		}
		
		//print last score saved, answer for problem 2
		System.out.println(saveScore);
	}
	
}



//class to store board state, and provide game methods
class Board {

	private boolean finished;
	private final Square[][] board;
	private final HashSet<Integer> numsHash;
	
	//standard constructor. takes a 2d array of squares, representing the board. Builds numsHash, containing all ints featured on board. Sets finished to false.
	public Board(Square[][] boardNums){
		this.board = boardNums.clone();
		this.finished = false;
		this.numsHash = new HashSet<>();
		for (Square[] row:board) {
			for(Square sq:row) {this.numsHash.add(sq.getNum());}
		}
	}
	
	//clone constructor. Takes a board, and copies it. Copies values, square values from ob.board into new Square objects, copies numsHash, resets finished to false
	public Board(Board ob) {
		this.numsHash = ob.numsHash;
		this.finished = false;
		this.board = new Square[5][5];
		for(int x = 0; x<5;x++){
			for(int y = 0;y<5;y++){this.board[x][y] = new Square(ob.board[x][y]);}
		}
	}
	
	//simple getter for finished
	public boolean getFinished() { return finished;}

	//checks an input int against numHash, returns true bool if there is a match
	private boolean checkHash(int i) {return numsHash.contains(i);}

	//takes an int, checks each Square in board for corresponding int, sets Square.checked to True for match, then break as each int only represented once.
	private void setSquare(int in) {
		for (Square[] row:board) {
			for(Square sq:row) {if( in == sq.getNum()) { sq.setChecked();break;}}
		}	
	}
	
	//checks if board is finished. return bool is it is.
	private boolean checkFin() {	
		
		int count = 0;
		
		//iterate through board, by column, increment count for each true Square.check. If 5, then column is complete and board is finished, so return true
		for(int x = 0; x<5;x++){
			for(int y = 0;y<5;y++){
				if(board[x][y].getChecked()) {count++;}
				if (count==5) {return true;}
			}
			count = 0;
		}
		
		//iterate through board, by row, increment count for each true Square.check. If 5, then row is complete and board is finished, so return true
		for(int y = 0;y<5;y++) {
			for(int x = 0;x<5;x++) {
				if(board[x][y].getChecked()) {count++;}
				if (count==5) {return true;}
			}
			count = 0;
		}
		
		//neither columns nor rows are complete, so return default false value.
		return false;
	}
	
	//get score for a completed board. This is equal to the sum of the int value of all the squares that have not been checked
	private int getScore() {
		int score = 0;
		for(int x = 0; x<5;x++) {
			for(int y = 0;y<5;y++) {if(!(board[x][y].getChecked())) {score = score + board[x][y].getNum();}}
		}
		return score;
	}
	
	//main interface method. Takes an int to check  
	public int check(int in) {
		int score = 0;
		
		//checks in against numsHash in checkHash,
		if(this.checkHash(in)){
			
			//if present set checked with setChecked, then calculate score of board, and set finished to True
			setSquare(in);
			if(checkFin()) {
				score = getScore();
				finished = true;
			}
		}
		
		//return final score, which is equal to in * score of board.
		return score * in;
	
	}
}

//simple class to store number and checked for a single square. Num is gettable, checked is gettable and settable 
class Square{
	
	private final int num;
	private boolean checked;
	
	//constructor, takes num and sets checked to false.
	public Square(int numIn) {
		this.num = numIn;
		this.checked = false;
	}
	
	//copy constructor. Takes a Square, copies num, resets checked to false
	public Square(Square s) {
		this.num = s.num;
		this.checked = false;
	}
	
	//getter and setter for checked. getter for num.
	public void setChecked() {this.checked = true;}
	public boolean getChecked() {return checked;}
	public int getNum() {return this.num;}
}

